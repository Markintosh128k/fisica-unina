import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator, AutoMinorLocator

def setup_axes(xtick=1, ytick=1):
    ax = plt.gca()
    # assi a croce
    ax.spines['left'].set_position('zero')
    ax.spines['bottom'].set_position('zero')
    ax.spines['right'].set_color('none')
    ax.spines['top'].set_color('none')
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')

    # locator major e minor
    ax.xaxis.set_major_locator(MultipleLocator(xtick))
    ax.yaxis.set_major_locator(MultipleLocator(ytick))
    ax.xaxis.set_minor_locator(AutoMinorLocator(2))
    ax.yaxis.set_minor_locator(AutoMinorLocator(2))

    # griglia
    ax.grid(which='major', linestyle='-', linewidth=0.7, color='lightgray')
    ax.grid(which='minor', linestyle=':', linewidth=0.4, color='lightgray')

    # rimuovere lo 0 da entrambi gli assi
    xt = ax.get_xticks()
    yt = ax.get_yticks()
    new_xt_labels = ["" if abs(t)<1e-12 else f"{int(t) if float(t).is_integer() else t:.2g}" for t in xt]
    new_yt_labels = ["" if abs(t)<1e-12 else f"{int(t) if float(t).is_integer() else t:.2g}" for t in yt]
    ax.set_xticks(xt)
    ax.set_xticklabels(new_xt_labels)
    ax.set_yticks(yt)
    ax.set_yticklabels(new_yt_labels)

    ax.margins(0.05)

# ---------------- Funzioni ---------------- #

def funzione_interpolata():
    plt.figure(figsize=(6,4))
    Xp = np.array([1,3,6]); Yp = np.array([3,1,5])
    coeff = np.polyfit(Xp, Yp, 2); poly = np.poly1d(coeff)
    x = np.linspace(1,6,300)
    plt.plot(x, poly(x))
    plt.scatter(Xp, Yp, color="red", zorder=5)
    plt.xlim(0,7); plt.ylim(0,6)
    setup_axes(xtick=1, ytick=1)
    plt.savefig("grafico.png")
    plt.show()

def funzione_invertibile():
    plt.figure(figsize=(6,4))
    f = lambda t: np.exp(t/3)
    t = np.linspace(-1,6,400)
    plt.plot(t, f(t), label="f(x)")
    plt.plot(f(t), t, label="f⁻¹(x)")
    m = max(f(t))
    plt.plot([0, m], [0, m], 'k--', alpha=0.6)
    plt.xlim(-2,7); plt.ylim(-1,8)
    setup_axes(xtick=1, ytick=1)
    plt.legend()
    plt.savefig("funzione_inversa.png")
    plt.show()

def funzione_pari():
    plt.figure(figsize=(6,4))
    x = np.linspace(-6,6,400)
    plt.plot(x, x**2)
    plt.xlim(-6,6); plt.ylim(-1,40)
    setup_axes(xtick=1, ytick=5)
    plt.savefig("funzione_pari.png")
    plt.show()

def funzione_dispari():
    plt.figure(figsize=(6,4))
    x = np.linspace(-6,6,400)
    plt.plot(x, x**3)
    plt.xlim(-6,6); plt.ylim(-220,220)
    setup_axes(xtick=1, ytick=50)
    plt.savefig("funzione_dispari.png")
    plt.show()

def funzione_gradino():
    plt.figure(figsize=(6,4))
    x = np.linspace(-6,6,400)
    y = np.sign(np.sin(x))
    plt.step(x, y, where="mid")
    plt.xlim(-6,6); plt.ylim(-1.5,1.5)
    setup_axes(xtick=1, ytick=0.5)
    plt.savefig("funzione_periodica.png")
    plt.show()

def funzione_due_massimi():
    plt.figure(figsize=(6,4))
    x = np.linspace(-3,3,400)
    f = -x**4 + 5*x**2 - 4
    plt.plot(x, f, label="f(x)")
    
    # massimi locali
    x_M1 = -np.sqrt(5/2)
    x_M2 = np.sqrt(5/2)
    y_M1 = -x_M1**4 + 5*x_M1**2 - 4
    y_M2 = -x_M2**4 + 5*x_M2**2 - 4
    plt.scatter([x_M1, x_M2], [y_M1, y_M2], color="red", zorder=5)
    plt.text(x_M1, y_M1+0.5, "$x_{M1}$", ha="center", color="red")
    plt.text(x_M2, y_M2+0.5, "$x_{M2}$", ha="center", color="red")
    
    plt.xlim(-3,3); plt.ylim(-2,6)
    setup_axes(xtick=0.5, ytick=1)
    plt.savefig("massimi_della_funzione.png")
    plt.show()

def potenza_pari():
    plt.figure(figsize=(6,4))
    x = np.linspace(-6,6,400)
    plt.plot(x, x**4)
    plt.xlim(-6,6); plt.ylim(-1,1300)
    setup_axes(xtick=1, ytick=200)
    plt.savefig("esponente_pari.png")
    plt.show()
    
def potenza_pari_ristretta():
    plt.figure(figsize=(6,4))
    x = np.linspace(0, 6, 400)
    plt.plot(x, x**4)
    plt.xlim(0, 6)
    plt.ylim(0, 1300)
    setup_axes(xtick=1, ytick=200)
    plt.savefig("esponente_pari_ristretta.png")
    plt.show()

def potenza_dispari():
    plt.figure(figsize=(6,4))
    x = np.linspace(-6,6,400)
    plt.plot(x, x**3)
    plt.xlim(-6,6); plt.ylim(-220,220)
    setup_axes(xtick=1, ytick=50)
    plt.savefig("esponente_dispari.png")
    plt.show()

def potenza_neg_pari():
    plt.figure(figsize=(6,4))
    x1 = np.linspace(-6,-0.2,300)
    x2 = np.linspace(0.2,6,300)
    plt.plot(x1, 1/x1**2)
    plt.plot(x2, 1/x2**2)
    plt.xlim(-6,6); plt.ylim(0,10)
    setup_axes(xtick=1, ytick=1)
    plt.savefig("esponente_neg_pari.png")
    plt.show()

def potenza_neg_dispari():
    plt.figure(figsize=(6,4))
    x1 = np.linspace(-6,-0.2,300)
    x2 = np.linspace(0.2,6,300)
    plt.plot(x1, 1/x1**3)
    plt.plot(x2, 1/x2**3)
    plt.xlim(-6,6); plt.ylim(-10,10)
    setup_axes(xtick=1, ytick=2)
    plt.savefig("esponente_neg_dispari.png")
    plt.show()

def potenza_restritta():
    plt.figure(figsize=(6,4))
    x = np.linspace(0,6,400)
    plt.plot(x, x**0.5, label="x^(1/2)")
    plt.plot(x, x**2, label="x^2")
    plt.plot(x, x**3, label="x^3")
    plt.xlim(0,6); plt.ylim(0,225)
    setup_axes(xtick=1, ytick=25)
    plt.legend()
    plt.savefig("restrizione_potenza.png")
    plt.show()

def radice_pari():
    plt.figure(figsize=(6,4))
    x_pos = np.linspace(0, 6, 400)
    plt.plot(x_pos, np.sqrt(x_pos), label="√x (n=2)")
    plt.plot(x_pos, x_pos**(1/4), label="⁴√x (n=4)")
    plt.xlim(0, 6)
    plt.ylim(0, 3)
    setup_axes(xtick=1, ytick=0.5)
    plt.legend()
    plt.savefig("radice_pari.png")
    plt.show()

def radice_dispari():
    plt.figure(figsize=(6,4))
    x = np.linspace(-6, 6, 400)
    plt.plot(x, np.cbrt(x), label="∛x (n=3)")
    plt.plot(x, np.sign(x) * np.abs(x)**(1/5), label="⁵√x (n=5)")
    plt.xlim(-6, 6)
    plt.ylim(-2, 3)
    setup_axes(xtick=1, ytick=0.5)
    plt.legend()
    plt.savefig("radice_dispari.png")
    plt.show()

def valore_assoluto():
    plt.figure(figsize=(6,4))
    x = np.linspace(-6,6,400)
    plt.plot(x, np.abs(x))
    plt.xlim(-6,6); plt.ylim(-1,7)
    setup_axes(xtick=1, ytick=1)
    plt.savefig("funzione_valore_assoluto.png")
    plt.show()

def lineari():
    x = np.linspace(-6, 6, 400)
    plt.figure(figsize=(7,5))
    plt.plot(x, 0*x, color='blue', linestyle='--', linewidth=2, label='a=0 (retta orizzontale)')
    plt.plot(x, 1*x, color='green', linestyle='-', linewidth=2, label='a>0 (pendenza positiva)')
    plt.plot(x, -1*x, color='red', linestyle='-.', linewidth=2, label='a<0 (pendenza negativa)')
    plt.xlim(-6,6); plt.ylim(-6,6)
    setup_axes(xtick=1, ytick=1)
    plt.legend(loc='upper left')
    plt.savefig("lineari_combinato.png")
    plt.show()
def monotone_crescenti():
    x = np.linspace(-6, 6, 400)
    plt.figure(figsize=(7,5))

    # Monotona crescente (con tratti costanti)
    y_monotona = np.piecewise(x, [x<-2, (x>=-2) & (x<2), x>=2], [0, 1, 2])
    plt.plot(x, y_monotona, color='green', linestyle='-', linewidth=2, label='Monotona crescente')

    # Strettamente crescente (sempre in salita)
    y_stretto = 0.5*x + 1
    plt.plot(x, y_stretto, color='blue', linestyle='--', linewidth=2, label='Strettamente crescente')

    plt.xlim(-6,6); plt.ylim(-1,4)
    setup_axes(xtick=1, ytick=1)
    plt.legend()
    plt.savefig("monotone_crescenti.png")
    plt.show()

def monotone_decrescenti():
    x = np.linspace(-6, 6, 400)
    plt.figure(figsize=(7,5))

    # Monotona decrescente (con tratti costanti)
    y_monotona = np.piecewise(x, [x<-2, (x>=-2) & (x<2), x>=2], [2, 1, 0])
    plt.plot(x, y_monotona, color='red', linestyle='-', linewidth=2, label='Monotona decrescente')

    # Strettamente decrescente (sempre in discesa)
    y_stretto = -0.5*x + 1
    plt.plot(x, y_stretto, color='orange', linestyle='--', linewidth=2, label='Strettamente decrescente')

    plt.xlim(-6,6); plt.ylim(-1,3)
    setup_axes(xtick=1, ytick=1)
    plt.legend()
    plt.savefig("monotone_decrescenti.png")
    plt.show()

def esponenziale():
    plt.figure(figsize=(6,4))
    x = np.linspace(-3, 3, 400)
    
    a1 = 2     # base > 1
    a2 = 0.5   # base tra 0 e 1

    plt.plot(x, a1**x, label=r"$a>1$", color="tab:blue")
    plt.plot(x, a2**x, label=r"$0<a<1$", color="tab:orange")
    
    plt.xlim(-3, 3)
    plt.ylim(0, 8)
    setup_axes(xtick=1, ytick=1)

    plt.legend(loc="upper left")
    plt.savefig("esponenziale.png", dpi=300)
    plt.show()

def logaritmica():
    plt.figure(figsize=(6,4))
    x = np.linspace(0.01, 8, 400)  # dominio positivo per il logaritmo
    
    a1 = 2     # base > 1
    a2 = 0.5   # base tra 0 e 1

    plt.plot(x, np.log(x)/np.log(a1), label=r"$a>1$", color="tab:blue")
    plt.plot(x, np.log(x)/np.log(a2), label=r"$0<a<1$", color="tab:orange")

    plt.xlim(0, 8)
    plt.ylim(-4, 4)
    setup_axes(xtick=1, ytick=1)

    plt.legend(loc="upper right")
    plt.title("Funzione logaritmica $y = \\log_a(x)$")
    plt.savefig("logaritmica.png", dpi=300)
    plt.show()


def potenze_reali():
    plt.figure(figsize=(6,4))
    x = np.linspace(0.1, 5, 400)  # evitare x=0 per alpha < 0

    # Tre esponenti rappresentativi
    alphas = [-1, 0.5, 2]
    labels = [r"$\alpha<1$", r"$0<\alpha<1$", r"$\alpha>1$"]

    for a, label in zip(alphas, labels):
        plt.plot(x, x**a, label=label, linewidth=2)

    plt.xlim(0, 5)
    plt.ylim(0, 10)
    setup_axes(xtick=0.5, ytick=1)
    plt.legend(title=r"$y = x^\alpha$")
    plt.savefig("potenze_reali.png")
    plt.show()

# ---------------- Esecuzione ---------------- #
potenze_reali()
